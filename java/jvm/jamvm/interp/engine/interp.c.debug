/*
 * Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009
 * Robert Lougher <rob@jamvm.org.uk>.
 *
 * This file is part of JamVM.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include <math.h>

#include "xi_string.h"
#include "xi_mem.h"
#include "xi_log.h"

#include "jam.h"
#include "thread.h"
#include "lock.h"
#include "excep.h"
#include "symbol.h"
#include "frame.h"

#include "interp.h"

xuintptr *
executeJava ()
{

	static const void *handlers_0_ENTRY[] =
		{ &&opc0_0_ENTRY, &&opc1_0_ENTRY, &&opc2_0_ENTRY,
&&opc3_0_ENTRY,
		&&opc4_0_ENTRY, &&opc5_0_ENTRY, &&opc6_0_ENTRY,
			&&opc7_0_ENTRY, &&opc8_0_ENTRY, &&opc9_0_ENTRY,
		&&opc10_0_ENTRY, &&opc11_0_ENTRY, &&opc12_0_ENTRY,
			&&opc13_0_ENTRY, &&opc14_0_ENTRY, &&opc15_0_ENTRY,
		&&opc16_0_ENTRY, &&opc17_0_ENTRY, &&opc18_0_ENTRY, &&unused,
			&&opc20_0_ENTRY, &&opc21_0_ENTRY,
		&&opc22_0_ENTRY, &&opc23_0_ENTRY, &&opc24_0_ENTRY,
			&&opc25_0_ENTRY, &&opc26_0_ENTRY, &&opc27_0_ENTRY,
		&&opc28_0_ENTRY, &&opc29_0_ENTRY, &&opc30_0_ENTRY,
			&&opc31_0_ENTRY, &&opc32_0_ENTRY, &&opc33_0_ENTRY,
		&&opc34_0_ENTRY, &&opc35_0_ENTRY, &&opc36_0_ENTRY,
			&&opc37_0_ENTRY, &&opc38_0_ENTRY, &&opc39_0_ENTRY,
		&&opc40_0_ENTRY, &&opc41_0_ENTRY, &&unused, &&opc43_0_ENTRY,
			&&opc44_0_ENTRY, &&opc45_0_ENTRY,
		&&opc46_0_ENTRY, &&opc47_0_ENTRY, &&opc48_0_ENTRY,
			&&opc49_0_ENTRY, &&opc50_0_ENTRY, &&opc51_0_ENTRY,
		&&opc52_0_ENTRY, &&opc53_0_ENTRY, &&opc54_0_ENTRY,
			&&opc55_0_ENTRY, &&opc56_0_ENTRY, &&opc57_0_ENTRY,
		&&opc58_0_ENTRY, &&opc59_0_ENTRY, &&opc60_0_ENTRY,
			&&opc61_0_ENTRY, &&opc62_0_ENTRY, &&opc63_0_ENTRY,
		&&opc64_0_ENTRY, &&opc65_0_ENTRY, &&opc66_0_ENTRY,
			&&opc67_0_ENTRY, &&opc68_0_ENTRY, &&opc69_0_ENTRY,
		&&opc70_0_ENTRY, &&opc71_0_ENTRY, &&opc72_0_ENTRY,
			&&opc73_0_ENTRY, &&opc74_0_ENTRY, &&opc75_0_ENTRY,
		&&opc76_0_ENTRY, &&opc77_0_ENTRY, &&opc78_0_ENTRY,
			&&opc79_0_ENTRY, &&opc80_0_ENTRY, &&opc81_0_ENTRY,
		&&opc82_0_ENTRY, &&opc83_0_ENTRY, &&opc84_0_ENTRY,
			&&opc85_0_ENTRY, &&opc86_0_ENTRY, &&opc87_0_ENTRY,
		&&opc88_0_ENTRY, &&opc89_0_ENTRY, &&opc90_0_ENTRY,
			&&opc91_0_ENTRY, &&opc92_0_ENTRY, &&opc93_0_ENTRY,
		&&opc94_0_ENTRY, &&opc95_0_ENTRY, &&opc96_0_ENTRY,
			&&opc97_0_ENTRY, &&opc98_0_ENTRY, &&opc99_0_ENTRY,
		&&opc100_0_ENTRY, &&opc101_0_ENTRY, &&opc102_0_ENTRY,
			&&opc103_0_ENTRY, &&opc104_0_ENTRY, &&opc105_0_ENTRY,
		&&opc106_0_ENTRY, &&opc107_0_ENTRY, &&opc108_0_ENTRY,
			&&opc109_0_ENTRY, &&opc110_0_ENTRY, &&opc111_0_ENTRY,
		&&opc112_0_ENTRY, &&opc113_0_ENTRY, &&opc114_0_ENTRY,
			&&opc115_0_ENTRY, &&opc116_0_ENTRY, &&opc117_0_ENTRY,
		&&opc118_0_ENTRY, &&opc119_0_ENTRY, &&opc120_0_ENTRY,
			&&opc121_0_ENTRY, &&opc122_0_ENTRY, &&opc123_0_ENTRY,
		&&opc124_0_ENTRY, &&opc125_0_ENTRY, &&opc126_0_ENTRY,
			&&opc127_0_ENTRY, &&opc128_0_ENTRY, &&opc129_0_ENTRY,
		&&opc130_0_ENTRY, &&opc131_0_ENTRY, &&opc132_0_ENTRY,
			&&opc133_0_ENTRY, &&opc134_0_ENTRY, &&opc135_0_ENTRY,
		&&opc136_0_ENTRY, &&opc137_0_ENTRY, &&opc138_0_ENTRY,
			&&opc139_0_ENTRY, &&opc140_0_ENTRY, &&opc141_0_ENTRY,
		&&opc142_0_ENTRY, &&opc143_0_ENTRY, &&opc144_0_ENTRY,
			&&opc145_0_ENTRY, &&opc146_0_ENTRY, &&opc147_0_ENTRY,
		&&opc148_0_ENTRY, &&opc149_0_ENTRY, &&opc150_0_ENTRY,
			&&opc151_0_ENTRY, &&opc152_0_ENTRY, &&opc153_0_ENTRY,
		&&opc154_0_ENTRY, &&opc155_0_ENTRY, &&opc156_0_ENTRY,
			&&opc157_0_ENTRY, &&opc158_0_ENTRY, &&opc159_0_ENTRY,
		&&opc160_0_ENTRY, &&opc161_0_ENTRY, &&opc162_0_ENTRY,
			&&opc163_0_ENTRY, &&opc164_0_ENTRY, &&opc165_0_ENTRY,
		&&opc166_0_ENTRY, &&opc167_0_ENTRY, &&opc168_0_ENTRY,
			&&opc169_0_ENTRY, &&opc170_0_ENTRY, &&opc171_0_ENTRY,
		&&opc172_0_ENTRY, &&opc173_0_ENTRY, &&opc174_0_ENTRY,
			&&opc175_0_ENTRY, &&opc176_0_ENTRY, &&opc177_0_ENTRY,
		&&opc178_0_ENTRY, &&opc179_0_ENTRY, &&opc180_0_ENTRY,
			&&opc181_0_ENTRY, &&opc182_0_ENTRY, &&opc183_0_ENTRY,
		&&opc184_0_ENTRY, &&opc185_0_ENTRY, &&unused,
			&&opc187_0_ENTRY, &&opc188_0_ENTRY, &&opc189_0_ENTRY,
		&&opc190_0_ENTRY, &&opc191_0_ENTRY, &&opc192_0_ENTRY,
			&&opc193_0_ENTRY, &&opc194_0_ENTRY, &&opc195_0_ENTRY,
		&&unused, &&opc197_0_ENTRY, &&opc198_0_ENTRY,
			&&opc199_0_ENTRY, &&unused, &&unused, &&unused,
		&&opc203_0_ENTRY, &&opc204_0_ENTRY, &&unused,
			&&opc206_0_ENTRY, &&opc207_0_ENTRY, &&opc208_0_ENTRY,
		&&opc209_0_ENTRY, &&opc210_0_ENTRY, &&opc211_0_ENTRY,
			&&opc212_0_ENTRY, &&opc213_0_ENTRY, &&opc214_0_ENTRY,
		&&opc215_0_ENTRY, &&opc216_0_ENTRY, &&opc217_0_ENTRY,
			&&opc218_0_ENTRY, &&opc219_0_ENTRY, &&opc220_0_ENTRY,
		&&opc221_0_ENTRY, &&unused, &&unused, &&unused, &&unused,
			&&unused, &&unused, &&unused, &&opc229_0_ENTRY,
		&&unused, &&opc231_0_ENTRY, &&opc232_0_ENTRY,
			&&opc233_0_ENTRY, &&unused, &&opc235_0_ENTRY,
			&&unused,
		&&unused, &&opc238_0_ENTRY, &&opc239_0_ENTRY, &&unused,
			&&unused, &&unused, &&opc243_0_ENTRY,
		&&opc244_0_ENTRY, &&opc245_0_ENTRY, &&unused, &&unused,
			&&unused, &&unused, &&unused, &&unused, &&unused,
		&&unused, &&unused, &&unused
	};
	static const void **handlers[] = { handlers_0_ENTRY };

	xuintptr *arg1;
	register CodePntr pc;
	ExecEnv *ee = getExecEnv ();
	Frame *frame = ee->last_frame;
	register xuintptr *lvars = frame->lvars;
	register xuintptr *ostack = frame->ostack;

	Object *this = (Object *) lvars[0];
	MethodBlock *new_mb, *mb = frame->mb;
	ConstantPool *cp = &(((ClassBlock *) (mb->class + 1))->constant_pool);

	if ((xuintptr) mb->code & 0x3)
		prepare (mb, handlers);
	pc = (CodePntr) mb->code;

      unused: rewrite_lock:goto *pc->handler;

      opc2_0_ENTRY:{
		xuintptr tos = -1;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc3_0_ENTRY: opc11_0_ENTRY: opc1_0_ENTRY:{
		xuintptr tos = 0;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc4_0_ENTRY:{
		xuintptr tos = 1;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc5_0_ENTRY:{
		xuintptr tos = 2;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc6_0_ENTRY:{
		xuintptr tos = 3;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc7_0_ENTRY:{
		xuintptr tos = 4;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc8_0_ENTRY:{
		xuintptr tos = 5;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc12_0_ENTRY:{
		xuintptr tos = 0x3f800000;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc13_0_ENTRY:{
		xuintptr tos = 0x40000000;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc17_0_ENTRY:{
		xuintptr tos = pc->operand.i;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc16_0_ENTRY:{
		xuintptr tos = pc->operand.i;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc203_0_ENTRY:{
		xuintptr tos = pc->operand.u;
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc204_0_ENTRY:{
		xuintptr tos = cp->info[pc->operand.i];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc21_0_ENTRY: opc23_0_ENTRY: opc25_0_ENTRY:{
		xuintptr tos = lvars[pc->operand.i];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc231_0_ENTRY:;
      opc26_0_ENTRY: opc34_0_ENTRY:{
		xuintptr tos = lvars[0];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	}
      opc27_0_ENTRY: opc35_0_ENTRY: opc43_0_ENTRY:{
		xuintptr tos = lvars[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc28_0_ENTRY: opc36_0_ENTRY: opc44_0_ENTRY:{
		xuintptr tos = lvars[2];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc29_0_ENTRY: opc37_0_ENTRY: opc45_0_ENTRY:{
		xuintptr tos = lvars[3];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc54_0_ENTRY: opc56_0_ENTRY: opc58_0_ENTRY:lvars[pc->operand.i]
		=
		*--ostack;
	goto *(++pc)->handler;;;
      opc59_0_ENTRY: opc75_0_ENTRY: opc67_0_ENTRY:lvars[0] =
		*--ostack;
	goto *(++pc)->handler;;;
      opc60_0_ENTRY: opc76_0_ENTRY: opc68_0_ENTRY:lvars[1] =
		*--ostack;
	goto *(++pc)->handler;;;
      opc61_0_ENTRY: opc77_0_ENTRY: opc69_0_ENTRY:lvars[2] =
		*--ostack;
	goto *(++pc)->handler;;;
      opc62_0_ENTRY: opc78_0_ENTRY: opc70_0_ENTRY:lvars[3] =
		*--ostack;
	goto *(++pc)->handler;;;
      opc96_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] + (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc100_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] - (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc104_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] * (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc108_0_ENTRY:if ((int) ostack[-1] == 0)
	  {
		  frame->last_pc = pc;
		  signalChainedExceptionEnum
			  (exception_java_lang_ArithmeticException,
			   "division by zero", ((void *) 0));
		  goto throwException;
	  };;;
	ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] / (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc112_0_ENTRY:if ((int) ostack[-1] == 0)
	  {
		  frame->last_pc = pc;
		  signalChainedExceptionEnum
			  (exception_java_lang_ArithmeticException,
			   "division by zero", ((void *) 0));
		  goto throwException;
	  };;;
	ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] % (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc126_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] & (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc128_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] | (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc130_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] ^ (int) ostack[1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc116_0_ENTRY:{
		xuintptr tos = -({ ostack -= (sizeof (int) + 3) / 4;
				 (int) ostack[0];});
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc120_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] << (ostack[1] & 0x1f);
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc122_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (int) ostack[0] >> (ostack[1] & 0x1f);
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc124_0_ENTRY:ostack -= 2;
	{
		xuintptr tos = (unsigned int) ostack[0] >> (ostack[1] & 0x1f);
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc159_0_ENTRY: opc165_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] == (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc160_0_ENTRY: opc166_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] != (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc161_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] < (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc162_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] >= (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc163_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] > (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc164_0_ENTRY:ostack -= 2;
	if ((int) ostack[0] <= (int) ostack[1])
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc154_0_ENTRY: opc199_0_ENTRY:if ((int) *--ostack != 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc153_0_ENTRY: opc198_0_ENTRY:if ((int) *--ostack == 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc155_0_ENTRY:if ((int) *--ostack < 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc156_0_ENTRY:if ((int) *--ostack >= 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc157_0_ENTRY:if ((int) *--ostack > 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc158_0_ENTRY:if ((int) *--ostack <= 0)
	  {
		  pc = (Instruction *) pc->operand.pntr;
		  goto *pc->handler;
	  }
	else
		goto *(++pc)->handler;;;
      opc132_0_ENTRY:lvars[pc->operand.ii.i1] += pc->operand.ii.i2;
	goto *(++pc)->handler;;
      opc87_0_ENTRY:ostack--;
	goto *(++pc)->handler;;;
      opc88_0_ENTRY:ostack -= 2 - 0;
	goto *(++pc)->handler;;
      opc89_0_ENTRY:{
		xuintptr tos = ostack[-1];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};;
      opc172_0_ENTRY: opc176_0_ENTRY: opc174_0_ENTRY:*lvars++ =
		*--ostack;
	goto methodReturn;;
      opc177_0_ENTRY:goto methodReturn;
      opc210_0_ENTRY:{
		xuintptr tos =
			*(u4 *) (((FieldBlock *) pc->operand.pntr)->u.
				 static_value.data);
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc211_0_ENTRY:*(u4 *) (((FieldBlock *) pc->operand.pntr)->u.static_value.data)
		= *--ostack;
	goto *(++pc)->handler;;;
      opc229_0_ENTRY:{
		xuintptr tos = *(u4 *) & ((char *) this)[pc->operand.i];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc206_0_ENTRY:{
		Object *obj = (Object *) * --ostack;
		if (!obj)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			xuintptr tos =
				*(u4 *) & ((char *) obj)[pc->operand.i];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	};
      opc219_0_ENTRY:{
		xuintptr tos =
			*(xuintptr *) (((FieldBlock *) pc->operand.pntr)->u.
				       static_value.data);
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc220_0_ENTRY:*(xuintptr *) (((FieldBlock *) pc->operand.pntr)->u.static_value.data)
		= *--ostack;
	goto *(++pc)->handler;;;
      opc221_0_ENTRY:{
		xuintptr tos = *(xuintptr *) & ((char *) this)[pc->operand.i];
		*ostack++ = tos;
		goto *(++pc)->handler;;
	};
      opc217_0_ENTRY:{
		Object *obj = (Object *) * --ostack;
		if (!obj)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			xuintptr tos =
				*(xuintptr *) & ((char *) obj)[pc->operand.i];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	};;

      opc0_0_ENTRY:(
		{
		goto *(++pc)->handler;;}
	);

      opc9_0_ENTRY: opc14_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = 0;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc15_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = 0x3ff0000000000000LL;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc10_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = 1;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc20_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] =
		*(long long *) &(cp->info[pc->operand.i]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc22_0_ENTRY: opc24_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] =
		*(u8 *) (&lvars[pc->operand.i]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc30_0_ENTRY: opc38_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = *(u8 *) (&lvars[0]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc31_0_ENTRY: opc39_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = *(u8 *) (&lvars[1]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc32_0_ENTRY: opc40_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = *(u8 *) (&lvars[2]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc33_0_ENTRY: opc41_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = *(u8 *) (&lvars[3]);
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);

      opc55_0_ENTRY: opc57_0_ENTRY:*(u8 *) (&lvars[pc->operand.i]) = (
						  {
						  ostack -=
						  (sizeof (xuint64) + 3) / 4;
						  *(xuint64 *) & ostack[0 *
									2];}
	);
	goto *(++pc)->handler;;;

      opc63_0_ENTRY: opc71_0_ENTRY:*(u8 *) (&lvars[0]) = (
				      {
				      ostack -= (sizeof (xuint64) + 3) / 4;
				      *(xuint64 *) & ostack[0 * 2];}
	);
      //log_trace(XDLOG, "$$$$$$$$$$$ OPC063(lstore_0) = 0x%016llx\n", *(xuint64 *) & ostack[0 * 2]);
	goto *(++pc)->handler;;;

      opc64_0_ENTRY: opc72_0_ENTRY:*(u8 *) (&lvars[1]) = (
				      {
				      ostack -= (sizeof (xuint64) + 3) / 4;
				      *(xuint64 *) & ostack[0 * 2];}
	);
      //log_trace(XDLOG, "$$$$$$$$$$$ OPC064(lstore_1) = 0x%016llx\n", *(xuint64 *) & ostack[0 * 2]);
	goto *(++pc)->handler;;;

      opc65_0_ENTRY: opc73_0_ENTRY:*(u8 *) (&lvars[2]) = (
				      {
				      ostack -= (sizeof (xuint64) + 3) / 4;
				      *(xuint64 *) & ostack[0 * 2];}
	);
      //log_trace(XDLOG, "$$$$$$$$$$$ OPC065(lstore_2) = 0x%016llx\n", *(xuint64 *) & ostack[0 * 2]);
	goto *(++pc)->handler;;;

      opc66_0_ENTRY: opc74_0_ENTRY:*(u8 *) (&lvars[3]) = (
				      {
				      ostack -= (sizeof (xuint64) + 3) / 4;
				      *(xuint64 *) & ostack[0 * 2];}
	);
      //log_trace(XDLOG, "$$$$$$$$$$$ OPC066(lstore_3) = 0x%016llx\n", *(xuint64 *) & ostack[0 * 2]);
	goto *(++pc)->handler;;;

      opc46_0_ENTRY: opc48_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			xuintptr tos =
				((int *) (((xuintptr *) (array + 1)) +
					  1))[idx];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc50_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			xuintptr tos =
				((xuintptr *) (((xuintptr *) (array + 1)) +
					       1))[idx];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc51_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			xuintptr tos =
				((signed char *) (((xuintptr *) (array + 1)) +
						  1))[idx];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc52_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			xuintptr tos =
				((unsigned short
				  *) (((xuintptr *) (array + 1)) + 1))[idx];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc53_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			xuintptr tos =
				((short *) (((xuintptr *) (array + 1)) +
					    1))[idx];
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc47_0_ENTRY: opc49_0_ENTRY:{
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		{
			*(xuint64 *) & ostack[0 * 2]
				=
				((u8 *) (((xuintptr *) (array + 1)) +
					 1))[idx];
			ostack += (sizeof (xuint64) + 3) / 4;
		};
		goto *(++pc)->handler;;;
	}

      opc79_0_ENTRY: opc81_0_ENTRY:{
		int val = *--ostack;
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		((int *) (((xuintptr *) (array + 1)) + 1))[idx] = val;
		goto *(++pc)->handler;;
	}

      opc84_0_ENTRY:{
		int val = *--ostack;
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		((char *) (((xuintptr *) (array + 1)) + 1))[idx] = val;
		goto *(++pc)->handler;;
	};

      opc85_0_ENTRY: opc86_0_ENTRY:{
		int val = *--ostack;
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		((short *) (((xuintptr *) (array + 1)) + 1))[idx] = val;
		goto *(++pc)->handler;;
	};

      opc83_0_ENTRY:{
		Object *obj = (Object *) * --ostack;
		int idx = *--ostack;
		Object *array = (Object *) * --ostack;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		if ((obj != ((void *) 0))
		    && !arrayStoreCheck (array->class, obj->class))
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_ArrayStoreException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };
		((Object **) (((xuintptr *) (array + 1)) + 1))[idx] = obj;
		goto *(++pc)->handler;;
	}

      opc80_0_ENTRY: opc82_0_ENTRY:{
		int idx = ostack[-3];
		Object *array = (Object *) ostack[-4];
		ostack -= 4;
		if (!array)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		{
			if (idx >= *(xuintptr *) (array + 1))
			  {
				  char buff[11];
				  xi_snprintf (buff, 11, "%d", idx);
				  {
					  frame->last_pc = pc;
					  signalChainedExceptionEnum
						  (exception_java_lang_ArrayIndexOutOfBoundsException,
						   buff, ((void *) 0));
					  goto throwException;
				  };
			  }
		};
		((u8 *) (((xuintptr *) (array + 1)) + 1))[idx] =
			*(u8 *) & ostack[2];
		goto *(++pc)->handler;;
	}

      opc90_0_ENTRY:{
		xuintptr word1 = ostack[-1];
		xuintptr word2 = ostack[-2];
		ostack[-2] = word1;
		ostack[-1] = word2;
		*ostack++ = word1;
		goto *(++pc)->handler;;
	}

      opc91_0_ENTRY:{
		xuintptr word1 = ostack[-1];
		xuintptr word2 = ostack[-2];
		xuintptr word3 = ostack[-3];
		ostack[-3] = word1;
		ostack[-2] = word3;
		ostack[-1] = word2;
		*ostack++ = word1;
		goto *(++pc)->handler;;
	}

      opc92_0_ENTRY:{
		ostack[0] = ostack[-2];
		ostack[1] = ostack[-1];
		ostack += 2;
		goto *(++pc)->handler;;
	}

      opc93_0_ENTRY:{
		xuintptr word1 = ostack[-1];
		xuintptr word2 = ostack[-2];
		xuintptr word3 = ostack[-3];
		ostack[-3] = word2;
		ostack[-2] = word1;
		ostack[-1] = word3;
		ostack[0] = word2;
		ostack[1] = word1;
		ostack += 2;
		goto *(++pc)->handler;;
	}

      opc94_0_ENTRY:{
		xuintptr word1 = ostack[-1];
		xuintptr word2 = ostack[-2];
		xuintptr word3 = ostack[-3];
		xuintptr word4 = ostack[-4];
		ostack[-4] = word2;
		ostack[-3] = word1;
		ostack[-2] = word4;
		ostack[-1] = word3;
		ostack[0] = word2;
		ostack[1] = word1;
		ostack += 2;
		goto *(++pc)->handler;;
	}

      opc95_0_ENTRY:{
		xuintptr word1 = ostack[-1];
		ostack[-1] = ostack[-2];
		ostack[-2] = word1;
		goto *(++pc)->handler;
	}

      opc98_0_ENTRY:(
		{
		*((float *) &ostack[-2] +
		  (sizeof (xuintptr) == 8
		   && (1 != 1))) +=
		*((float *) &ostack[-1] +
		  (sizeof (xuintptr) == 8 && (1 != 1)));
		ostack -= (sizeof (float) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc99_0_ENTRY:(
		{
		*(double *) &ostack[-2 * 2] += *(double *) &ostack[-1 * 2];
		ostack -= (sizeof (double) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc102_0_ENTRY:(
		{
		*((float *) &ostack[-2] +
		  (sizeof (xuintptr) == 8
		   && (1 != 1))) -=
		*((float *) &ostack[-1] +
		  (sizeof (xuintptr) == 8 && (1 != 1)));
		ostack -= (sizeof (float) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc103_0_ENTRY:(
		{
		*(double *) &ostack[-2 * 2] -= *(double *) &ostack[-1 * 2];
		ostack -= (sizeof (double) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc106_0_ENTRY:(
		{
		*((float *) &ostack[-2] +
		  (sizeof (xuintptr) == 8
		   && (1 != 1))) *=
		*((float *) &ostack[-1] +
		  (sizeof (xuintptr) == 8 && (1 != 1)));
		ostack -= (sizeof (float) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc107_0_ENTRY:(
		{
		*(double *) &ostack[-2 * 2] *= *(double *) &ostack[-1 * 2];
		ostack -= (sizeof (double) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc110_0_ENTRY:(
		{
		*((float *) &ostack[-2] +
		  (sizeof (xuintptr) == 8
		   && (1 !=
		       1))) /= *((float *) &ostack[-1] + (sizeof (xuintptr) ==
							  8 && (1 != 1)));
		ostack -= (sizeof (float) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc111_0_ENTRY:(
		{
		*(double *) &ostack[-2 * 2] /= *(double *) &ostack[-1 * 2];
		ostack -= (sizeof (double) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc97_0_ENTRY:*(xint64 *) & ostack[-2 * 2] +=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;
	//log_trace(XDLOG, "$$$$$$$$$$$ OPC097(ladd) = 0x%016llx\n", *(xint64 *) & ostack[-2 * 2]);
      opc101_0_ENTRY:*(xint64 *) & ostack[-2 * 2] -=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc105_0_ENTRY:*(xint64 *) & ostack[-2 * 2] *=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc109_0_ENTRY:if (*(xint64 *) & ostack[-1 * 2] == 0)
	  {
		  frame->last_pc = pc;
		  signalChainedExceptionEnum
			  (exception_java_lang_ArithmeticException,
			   "division by zero", ((void *) 0));
		  goto throwException;
	  };;;
	*(xint64 *) & ostack[-2 * 2] /= *(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc113_0_ENTRY:if (*(xint64 *) & ostack[-1 * 2] == 0)
	  {
		  frame->last_pc = pc;
		  signalChainedExceptionEnum
			  (exception_java_lang_ArithmeticException,
			   "division by zero", ((void *) 0));
		  goto throwException;
	  };;;
	*(xint64 *) & ostack[-2 * 2] %= *(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc127_0_ENTRY:*(xint64 *) & ostack[-2 * 2] &=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc129_0_ENTRY:*(xint64 *) & ostack[-2 * 2] |=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc131_0_ENTRY:*(xint64 *) & ostack[-2 * 2] ^=
		*(xint64 *) & ostack[-1 * 2];
	ostack -= (sizeof (xint64) + 3) / 4;
	goto *(++pc)->handler;;;

      opc121_0_ENTRY:{
		int shift = *--ostack & 0x3f;
		*(xint64 *) & ostack[-1 * 2] <<= shift;
		goto *(++pc)->handler;;
	};

      opc123_0_ENTRY:{
		int shift = *--ostack & 0x3f;
		*(xint64 *) & ostack[-1 * 2] >>= shift;
		goto *(++pc)->handler;;
	};

      opc125_0_ENTRY:{
		int shift = *--ostack & 0x3f;
		*(xuint64 *) & ostack[-1 * 2] >>= shift;
		goto *(++pc)->handler;;
	};

      opc114_0_ENTRY:(
		{
		*((float *) &ostack[-2] +
		  (sizeof (xuintptr) == 8
		   && (1 != 1))) =
		fmod (*
		      ((float *) &ostack[-2] +
		       (sizeof (xuintptr) == 8
			&& (1 != 1))),
		      *((float *) &ostack[-1] +
			(sizeof (xuintptr) == 8 && (1 != 1))));
		ostack -= (sizeof (float) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc115_0_ENTRY:(
		{
		*(double *) &ostack[-2 * 2] =
		fmod (*(double *) &ostack[-2 * 2],
		      *(double *) &ostack[-1 * 2]);
		ostack -= (sizeof (double) + 3) / 4; goto *(++pc)->handler;;;}
	);

      opc117_0_ENTRY:(
		{
		*(xint64 *) & ostack[-1 * 2] = -*(xint64 *) & ostack[-1 * 2];
		goto *(++pc)->handler;;;}
	);

      opc118_0_ENTRY:(
		{
		*((float *) &ostack[-1] +
		  (sizeof (xuintptr) == 8
		   && (1 != 1))) =
		-*((float *) &ostack[-1] +
		   (sizeof (xuintptr) == 8 && (1 != 1)));
		goto *(++pc)->handler;;;}
	);

      opc119_0_ENTRY:(
		{
		*(double *) &ostack[-1 * 2] = -*(double *) &ostack[-1 * 2];
		goto *(++pc)->handler;;;}
	);

      opc136_0_ENTRY:{
		xint64 value = ({ ostack -= (sizeof (xint64) + 3) / 4;
				*(xint64 *) & ostack[0 * 2];}
		);
		{
			xuintptr tos = (int) value;
			//log_trace(XDLOG, "$$$$$$$$$$$ OPC136(l2i) : value = 0x%016llx / int = 0x%08x\n", value, tos);
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc134_0_ENTRY:(
		{
		{
		int value = (
				    {
				    ostack -= (sizeof (int) + 3) / 4;
				    (int) ostack[0];});
		{
		*((float *) &ostack[0] +
		  (sizeof (xuintptr) == 8 && (1 != 1))) = (float) value;
		ostack += (sizeof (float) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc135_0_ENTRY:(
		{
		{
		int value = (
				    {
				    ostack -= (sizeof (int) + 3) / 4;
				    (int) ostack[0];});
		{
		*(double *) &ostack[0 * 2] = (double) value;
		ostack += (sizeof (double) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc137_0_ENTRY:(
		{
		{
		xint64 value = (
				       {
				       ostack -= (sizeof (xint64) + 3) / 4;
				       *(xint64 *) & ostack[0 * 2];}
		);
		{
		*((float *) &ostack[0] +
		  (sizeof (xuintptr) == 8 && (1 != 1))) = (float) value;
		//log_trace(XDLOG, "$$$$$$$$$$$ OPC137(l2f) : value = 0x%llx / / float = %f\n", value, *(float*)&ostack[0]);
		ostack += (sizeof (float) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc138_0_ENTRY:(
		{
		{
		xint64 value = (
				       {
				       ostack -= (sizeof (xint64) + 3) / 4;
				       *(xint64 *) & ostack[0 * 2];}
		);
		{
		*(double *) &ostack[0 * 2] = (double) value;
		//log_trace(XDLOG, "$$$$$$$$$$$ OPC138(l2d) : value = 0x%llx / / double = %f\n", value, *(double*)&ostack[0]);
		ostack += (sizeof (double) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc141_0_ENTRY:(
		{
		{
		float value = (
				      {
				      ostack -= (sizeof (float) + 3) / 4;
				      *((float *) &ostack[0] +
					(sizeof (xuintptr) == 8
					 && (1 != 1)));}
		);
		{
		*(double *) &ostack[0 * 2] = (double) value;
		ostack += (sizeof (double) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc144_0_ENTRY:(
		{
		{
		double value = (
				       {
				       ostack -= (sizeof (double) + 3) / 4;
				       *(double *) &ostack[0 * 2];});
		{
		*((float *) &ostack[0] +
		  (sizeof (xuintptr) == 8 && (1 != 1))) = (float) value;
		ostack += (sizeof (float) + 3) / 4;};
		goto *(++pc)->handler;;};}
	);

      opc139_0_ENTRY:(
		{
		{
		int res; float value = (
					       {
					       ostack -=
					       (sizeof (float) + 3) / 4;
					       *((float *) &ostack[0] +
						 (sizeof (xuintptr) == 8
						  && (1 != 1)));}
		); if (value >= (float) 2147483647) res = 2147483647;
		else
		if (value <= (float) (-2147483647 - 1)) res =
		(-2147483647 - 1);
		else
		if (value != value) res = 0;
		else
		res = (int) value;
		{
		xuintptr tos = res; *ostack++ = tos;
		goto *(++pc)->handler;;};};}
	);

      opc142_0_ENTRY:(
		{
		{
		int res; double value = (
						{
						ostack -=
						(sizeof (double) + 3) / 4;
						*(double *) &ostack[0 * 2];});
		if (value >= (double) 2147483647) res = 2147483647;
		else
		if (value <= (double) (-2147483647 - 1)) res =
		(-2147483647 - 1);
		else
		if (value != value) res = 0;
		else
		res = (int) value;
		{
		xuintptr tos = res; *ostack++ = tos;
		goto *(++pc)->handler;;};};}
	);

      opc140_0_ENTRY:(
		{
		{
		xint64 res; float value = (
						  {
						  ostack -=
						  (sizeof (float) + 3) / 4;
						  *((float *) &ostack[0] +
						    (sizeof (xuintptr) == 8
						     && (1 != 1)));}
		);
		if (value >= (float) 9223372036854775807LL) res =
		9223372036854775807LL;
		else
		if (value <= (float) (-9223372036854775807LL - 1)) res =
		(-9223372036854775807LL - 1);
		else
		if (value != value) res = 0;
		else
		res = (xint64) value;
		{
		*(xuint64 *) & ostack[0 * 2] = res;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;};}
	);

      opc143_0_ENTRY:(
		{
		{
		xint64 res; double value = (
						   {
						   ostack -=
						   (sizeof (double) + 3) / 4;
						   *(double *) &ostack[0 *
								       2];});
		if (value >= (double) 9223372036854775807LL) res =
		9223372036854775807LL;
		else
		if (value <= (double) (-9223372036854775807LL - 1)) res =
		(-9223372036854775807LL - 1);
		else
		if (value != value) res = 0;
		else
		res = (xint64) value;
		{
		*(xuint64 *) & ostack[0 * 2] = res;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;};}
	);
#if 0
      opc133_0_ENTRY:(
		{
		{
		*(xuint64 *) & ostack[0 * 2] = (
						       {
						       ostack -=
						       (sizeof (int) + 3) / 4;
						       (int) 0; /*ostack[0]*/});
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);
#endif

      opc133_0_ENTRY:(
		{
    	  //log_trace(XDLOG, "$$$$$$$$$$$ OPC133(i2l) : ostack = %p\n", ostack);
		{
		*(xuint64 *) & ostack[0 * 2] = (
						       {
						       ostack -=
						       (sizeof (int) + 3) / 4;
						       //log_trace(XDLOG, "$$$$$$$$$$$ OPC133(i2l) : ostack = %p\n", ostack);
						       (int) ((((int) ostack[0]) < 0) ? 0xFFFFFFFF : 0); /**/});
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
	);


      opc145_0_ENTRY:(
		{
		{
		xuintptr tos = (
				       {
				       ostack -= (sizeof (xint8) + 3) / 4;
				       (xint8) ostack[0];}
		); *ostack++ = tos; goto *(++pc)->handler;;};}
	);

      opc146_0_ENTRY:(
		{
		{
		xuintptr tos = (
				       {
				       ostack -= (sizeof (xuint16) + 3) / 4;
				       (xuint16) ostack[0];}
		); *ostack++ = tos; goto *(++pc)->handler;;};}
	);

      opc147_0_ENTRY:(
		{
		{
		xuintptr tos = (
				       {
				       ostack -= (sizeof (xint16) + 3) / 4;
				       (xint16) ostack[0];}
		); *ostack++ = tos; goto *(++pc)->handler;;};}
	);

      opc148_0_ENTRY:{
		xint64 v2 = ({ ostack -= (sizeof (xint64) + 3) / 4;
			     *(xint64 *) & ostack[0 * 2];}
		);
		xint64 v1 = ({ ostack -= (sizeof (xint64) + 3) / 4;
			     *(xint64 *) & ostack[0 * 2];}
		);
		{
			xuintptr tos = v1 == v2 ? 0 : (v1 < v2 ? -1 : 1);
			//log_trace(XDLOG, "$$$$$$$$$$$ OP148(lcmp) : v2 = 0x%016llx / v1 = 0x%016llx / tos = %d\n", v2, v1, tos);
			*ostack++ = tos;
			goto *(++pc)->handler;;
		};
	}

      opc152_0_ENTRY:(
		{
		(
			{
			int res; double v2 = (
						     {
						     ostack -=
						     (sizeof (double) +
						      3) / 4;
						     *(double *) &ostack[0 *
									 2];});
			double v1 = (
									       {
									       ostack
									       -=
									       (sizeof
										(double)
										+
										3)
									       /
									       4;
									       *
									       (double
										*)
									       &ostack
									       [0
										*
										2];});
			if (v1 == v2) res = 0;
			else
			if (v1 < v2) res = -1;
			else
			if (v1 > v2) res = 1;
			else
			res = 1;
			{
			xuintptr tos = res; *ostack++ = tos;
			goto *(++pc)->handler;;};}
		);}
	);

      opc151_0_ENTRY:(
		{
		(
			{
			int res; double v2 = (
						     {
						     ostack -=
						     (sizeof (double) +
						      3) / 4;
						     *(double *) &ostack[0 *
									 2];});
			double v1 = (
									       {
									       ostack
									       -=
									       (sizeof
										(double)
										+
										3)
									       /
									       4;
									       *
									       (double
										*)
									       &ostack
									       [0
										*
										2];});
			if (v1 == v2) res = 0;
			else
			if (v1 < v2) res = -1;
			else
			if (v1 > v2) res = 1;
			else
			res = -1;
			{
			xuintptr tos = res; *ostack++ = tos;
			goto *(++pc)->handler;;};}
		);}
	);

      opc150_0_ENTRY:(
		{
		(
			{
			int res; float v2 = (
						    {
						    ostack -=
						    (sizeof (float) + 3) / 4;
						    *((float *) &ostack[0] +
						      (sizeof (xuintptr) == 8
						       && (1 != 1)));}
			); float v1 = (
					      {
					      ostack -=
					      (sizeof (float) + 3) / 4;
					      *((float *) &ostack[0] +
						(sizeof (xuintptr) == 8
						 && (1 != 1)));}
			); if (v1 == v2) res = 0;
			else
			if (v1 < v2) res = -1;
			else
			if (v1 > v2) res = 1;
			else
			res = 1;
			{
			xuintptr tos = res; *ostack++ = tos;
			goto *(++pc)->handler;;};}
		);}
	);

      opc149_0_ENTRY:(
		{
		(
			{
			int res; float v2 = (
						    {
						    ostack -=
						    (sizeof (float) + 3) / 4;
						    *((float *) &ostack[0] +
						      (sizeof (xuintptr) == 8
						       && (1 != 1)));}
			); float v1 = (
					      {
					      ostack -=
					      (sizeof (float) + 3) / 4;
					      *((float *) &ostack[0] +
						(sizeof (xuintptr) == 8
						 && (1 != 1)));}
			); if (v1 == v2) res = 0;
			else
			if (v1 < v2) res = -1;
			else
			if (v1 > v2) res = 1;
			else
			res = -1;
			{
			xuintptr tos = res; *ostack++ = tos;
			goto *(++pc)->handler;;};}
		);}
	);

      opc167_0_ENTRY:(
		{
		(
			{
			if ((1 == 1))
			{
			pc = (Instruction *) pc->operand.pntr;
			goto *pc->handler;}
			else
			goto *(++pc)->handler;;}
		);}
	);

      opc168_0_ENTRY:(
		{
		(
			{
			*ostack++ = (xuintptr) pc; if ((1 == 1))
			{
			pc = (Instruction *) pc->operand.pntr;
			goto *pc->handler;}
			else
			goto *(++pc)->handler;;}
		);}
	);

      opc169_0_ENTRY:(
		{
		pc = (CodePntr) lvars[pc->operand.i];
		pc++; goto *pc->handler;;}
	);

      opc173_0_ENTRY: opc175_0_ENTRY:*(u8 *) lvars = (
				{
				ostack -= (sizeof (xuint64) + 3) / 4;
				*(xuint64 *) & ostack[0 * 2];}
	);
      //log_trace(XDLOG, "$$$$$$$$$$$ OPC173(lreturn) = 0x%016llx\n", *(u8 *) lvars);
	lvars += 2;
	goto methodReturn;

      opc190_0_ENTRY:(
		{
		{
		Object * array = (Object *) * --ostack; if (!array)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};;
		{
		xuintptr tos = *(xuintptr *) (array + 1); *ostack++ = tos;
		goto *(++pc)->handler;;};}
		}
	);

      opc191_0_ENTRY:(
		{
		{
		Object * obj = (Object *) ostack[-1];
		frame->last_pc = pc; if (!obj)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};; ee->exception = obj;
		goto throwException;}
		}
	);

      opc188_0_ENTRY:(
		{
		{
		int type = pc->operand.i;
		int count = *--ostack;
		Object * obj;
		frame->last_pc = pc;
		if ((obj =
		     allocTypeArray (type,
				     count)) ==
		    ((void *) 0)) goto throwException;
		{
		xuintptr tos = (xuintptr) obj; *ostack++ = tos;
		goto *(++pc)->handler;;};}
		}
	);

      opc194_0_ENTRY:(
		{
		{
		Object * obj = (Object *) * --ostack; if (!obj)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};; objectLock (obj);
		goto *(++pc)->handler;;}
		}
	);

      opc195_0_ENTRY:(
		{
		{
		Object * obj = (Object *) * --ostack; if (!obj)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};; objectUnlock (obj);
		goto *(++pc)->handler;;}
		}
	);

      opc18_0_ENTRY:(
		{
		(
			{
			int idx, cache; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc18_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			operand.u = resolveSingleConstant (mb->class, idx);
			if (ee->exception) goto throwException;
			if (cp->type[idx] == 25 || cp->type[idx] == 26)
			{
			operand.i = idx;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][204];};}
			else
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][203];}; goto *pc->handler;}
		);}
	);

      opc170_0_ENTRY:(
		{
		{
		SwitchTable * table = (SwitchTable *) pc->operand.pntr;
		int index = *--ostack;
		if (index < table->low
		    || index > table->high) pc = table->deflt;
		else
		pc = table->entries[index - table->low]; goto *pc->handler;}
		}
	);

      opc171_0_ENTRY:(
		{
		{
		LookupTable * table = (LookupTable *) pc->operand.pntr;
		int key = *--ostack;
		int i;
		for (i = 0;
		     (i < table->num_entries)
		     && (key != table->entries[i].key); i++);
		pc =
		(i ==
		 table->num_entries ? table->deflt : table->entries[i].
		 handler); goto *pc->handler;}
		}
	);

      opc178_0_ENTRY:(
		{
		(
			{
			int idx, cache, opcode;
			FieldBlock * fb; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc178_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			fb = resolveField (mb->class, idx);
			if (ee->exception) goto throwException;
			if ((*fb->type == 'J')
			    || (*fb->type == 'D')) opcode = 212;
			else
			if (*fb->type == 'L'
			    || *fb->type == '[') opcode = 219;
			else
			opcode = 210; operand.pntr = fb;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][opcode];}; goto *pc->handler;}
		);}
	);

      opc179_0_ENTRY:(
		{
		(
			{
			int idx, cache, opcode;
			FieldBlock * fb; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc179_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			fb = resolveField (mb->class, idx);
			if (ee->exception) goto throwException;
			if ((*fb->type == 'J')
			    || (*fb->type == 'D')) opcode = 213;
			else
			if (*fb->type == 'L'
			    || *fb->type == '[') opcode = 220;
			else
			opcode = 211; operand.pntr = fb;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][opcode];}; goto *pc->handler;}
		);}
	);

      opc180_0_ENTRY:(
		{
		(
			{
			int idx, cache, opcode;
			Operand operand; FieldBlock * fb;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc180_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			fb = resolveField (mb->class, idx);
			if (ee->exception) goto throwException;
			if ((*fb->type == 'J')
			    || (*fb->type == 'D')) opcode = 208;
			else
			if (*fb->type == 'L'
			    || *fb->type == '[') opcode = 217;
			else
			opcode = 206; operand.i = fb->u.offset;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][opcode];}; goto *pc->handler;}
		);}
	);

      opc181_0_ENTRY:(
		{
		(
			{
			int idx, cache, opcode;
			FieldBlock * fb; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc181_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			fb = resolveField (mb->class, idx);
			if (ee->exception) goto throwException;
			if ((*fb->type == 'J')
			    || (*fb->type == 'D')) opcode = 209;
			else
			if (*fb->type == 'L'
			    || *fb->type == '[') opcode = 218;
			else
			opcode = 207; operand.i = fb->u.offset;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][opcode];}; goto *pc->handler;}
		);}
	);

      opc182_0_ENTRY:(
		{
		(
			{
			int idx, cache; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc182_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			new_mb = resolveMethod (mb->class, idx);
			if (ee->exception) goto throwException;
			if (new_mb->access_flags & 0x0002)
			{
			operand.pntr = new_mb;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][215];};}
			else
			{
			operand.uu.u1 = new_mb->args_count;
			operand.uu.u2 = new_mb->method_table_index;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][214];};}
			goto *pc->handler;}
		);}
	);

      opc183_0_ENTRY:(
		{
		(
			{
			int idx, cache; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc183_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			new_mb = resolveMethod (mb->class, idx);
			if (ee->exception) goto throwException;
			if ((((ClassBlock *) (mb->class +
					      1))->access_flags & 0x0020)
			    && ((new_mb->access_flags & 0x0002) == 0)
			    && (new_mb->name[0] != '<'))
			{
			operand.i = new_mb->method_table_index;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][216];};}
			else
			{
			operand.pntr = new_mb;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][215];};}
			goto *pc->handler;}
		);}
	);

      opc184_0_ENTRY:(
		{
		(
			{
			int idx, cache; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc184_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			new_mb = resolveMethod (mb->class, idx);
			if (ee->exception) goto throwException;
			operand.pntr = new_mb;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][232];}; goto *pc->handler;}
		);}
	);

      opc185_0_ENTRY:(
		{
		(
			{
			int idx, cache; Operand operand;
			{
		      idx = pc->operand.uui.u1; cache = pc->operand.uui.i; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			if (pc->handler !=
			    &&opc185_0_ENTRY) goto *pc->handler;};
			frame->last_pc = pc;
			new_mb = resolveInterfaceMethod (mb->class, idx);
			if (ee->exception) goto throwException;
			if (((ClassBlock *) (new_mb->class +
					     1))->access_flags & 0x0200)
			{
			operand.uu.u1 = idx; operand.uu.u2 = 0;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][244];};}
			else
			{
			operand.uu.u1 = new_mb->args_count;
			operand.uu.u2 = new_mb->method_table_index;
			{
		      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][214];};}
			goto *pc->handler;}
		);}
	);

      opc197_0_ENTRY:(
		{
		(
			{
			int idx = pc->operand.uui.u1;
			int cache = pc->operand.uui.i;
			frame->last_pc = pc;
			resolveClass (mb->class, idx, (1 != 1));
			if (ee->exception) goto throwException;
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = pc->operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][243];}; goto *pc->handler;}
		);}
	);

      opc187_0_ENTRY: opc189_0_ENTRY: opc192_0_ENTRY: opc193_0_ENTRY:(
		{
		(
			{
			int idx = pc->operand.uui.u1;
			int opcode = pc->operand.uui.u2;
			int cache = pc->operand.uui.i;
			Class * class;
			frame->last_pc = pc;
			class = resolveClass (mb->class, idx, opcode == 187);
			if (ee->exception) goto throwException;
			if (opcode == 187)
			{
			ClassBlock * cb = ((ClassBlock *) (class + 1));
			if (cb->access_flags & (0x0200 | 0x0400))
			{
			signalChainedExceptionEnum
			(exception_java_lang_InstantiationError, cb->name,
			 ((void *) 0)); goto throwException;}
			}
			{
	      pc->handler = &&rewrite_lock; __asm__ __volatile__ ("lock; addl $0,0(%%esp)"::: "memory"); pc->operand = pc->operand; __asm__ __volatile__ ("lock; addl $0,0(%%esp)":::"memory");
			pc->handler =
			handlers[cache][(opcode + 233 - 187)];};
			goto *pc->handler;}
		);}
	);

      opc212_0_ENTRY:(
		{
		{
		FieldBlock * fb = ((FieldBlock *) pc->operand.pntr);
		{
		*(xuint64 *) & ostack[0 * 2] = fb->u.static_value.l;
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
		}
	);

      opc213_0_ENTRY:{
		FieldBlock *fb = ((FieldBlock *) pc->operand.pntr);
		fb->u.static_value.l = (
					       {
					       ostack -=
					       (sizeof (xuint64) + 3) / 4;
					       *(xuint64 *) & ostack[0 * 2];}
		);
		goto *(++pc)->handler;;;
	}

      opc208_0_ENTRY:(
		{
		{
		Object * obj = (Object *) * --ostack; if (!obj)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};;
		{
		*(xuint64 *) & ostack[0 * 2] =
		*(u8 *) & ((char *) obj)[pc->operand.i];
		ostack += (sizeof (xuint64) + 3) / 4;};
		goto *(++pc)->handler;;;}
		}
	);

      opc209_0_ENTRY:{
		Object *obj = (Object *) ostack[-3];
		ostack -= 3;
		if (!obj)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		*(u8 *) & ((char *) obj)[pc->operand.i] = *(u8 *) & ostack[1];
		goto *(++pc)->handler;;
	}

      opc207_0_ENTRY:{
		Object *obj = (Object *) ostack[-2];
		ostack -= 2;
		if (!obj)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		*(u4 *) & ((char *) obj)[pc->operand.i] = ostack[1];
		goto *(++pc)->handler;;
	}
      opc218_0_ENTRY:{
		Object *obj = (Object *) ostack[-2];
		ostack -= 2;
		if (!obj)
		  {
			  frame->last_pc = pc;
			  signalChainedExceptionEnum
				  (exception_java_lang_NullPointerException,
				   ((void *) 0), ((void *) 0));
			  goto throwException;
		  };;
		*(xuintptr *) & ((char *) obj)[pc->operand.i] = ostack[1];
		goto *(++pc)->handler;;
	}

      opc216_0_ENTRY:(
		{
		{
		new_mb =
		((ClassBlock *) (((ClassBlock *) (mb->class + 1))->super +
				 1))->method_table[pc->operand.i];
		arg1 = ostack - new_mb->args_count; if (!*arg1)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};; goto invokeMethod;}
		}
	);

      opc215_0_ENTRY:(
		{
		{
		new_mb = ((MethodBlock *) pc->operand.pntr);
		arg1 = ostack - new_mb->args_count; if (!*arg1)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};; goto invokeMethod;}
		}
	);

      opc232_0_ENTRY:(
		{
		{
		new_mb = ((MethodBlock *) pc->operand.pntr);
		arg1 = ostack - new_mb->args_count; goto invokeMethod;}
		}
	);

      opc244_0_ENTRY:(
		{
		{
		int mtbl_idx;
		ClassBlock * cb;
		int cache = pc->operand.uu.u2;
		new_mb = (MethodBlock *) cp->info[pc->operand.uu.u1];
		arg1 = ostack - new_mb->args_count; if (!*arg1)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};;
		cb = ((ClassBlock *) ((*(Object **) arg1)->class + 1));
		if (cache >= cb->imethod_table_size
		    || new_mb->class != cb->imethod_table[cache].interface)
		{
		for (cache = 0;
		     cache < cb->imethod_table_size
		     && new_mb->class != cb->imethod_table[cache].interface;
		     cache++); if (cache == cb->imethod_table_size)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_IncompatibleClassChangeError,
		 "unimplemented interface", ((void *) 0));
		goto throwException;}; pc->operand.uu.u2 = cache;}
		mtbl_idx =
		cb->imethod_table[cache].offsets[new_mb->method_table_index];
		new_mb = cb->method_table[mtbl_idx]; goto invokeMethod;}
		}
	);

      opc233_0_ENTRY:(
		{
		{
		Class * class = (Class *) cp->info[pc->operand.uui.u1];
		Object * obj;
		frame->last_pc = pc;
		if ((obj =
		     allocObject (class)) ==
		    ((void *) 0)) goto throwException;
		{
		xuintptr tos = (xuintptr) obj; *ostack++ = tos;
		goto *(++pc)->handler;;};}
		}
	);

      opc235_0_ENTRY:(
		{
		{
		Class * class = (Class *) cp->info[pc->operand.uui.u1];
		char *name = ((ClassBlock *) (class + 1))->name;
		int count = *--ostack;
		Class * array_class;
		char *ac_name;
		Object * obj; frame->last_pc = pc; if (count < 0)
		{
		signalChainedExceptionEnum
		(exception_java_lang_NegativeArraySizeException, ((void *) 0),
		 ((void *) 0)); goto throwException;}
		ac_name = sysMalloc (xi_strlen (name) + 4);
		if (name[0] == '[') xi_strcat (xi_strcpy (ac_name, "["),
					       name);
		else
		xi_strcat (xi_strcat (xi_strcpy (ac_name, "[L"), name), ";");
		array_class =
		findArrayClassFromClassLoader (ac_name,
					       ((ClassBlock *) (mb->class +
								1))->
					       class_loader);
		xi_mem_free (ac_name); if (ee->exception) goto throwException;
		if ((obj =
		     allocArray (array_class, count,
				 sizeof (Object *))) ==
		    ((void *) 0)) goto throwException;
		{
		xuintptr tos = (xuintptr) obj; *ostack++ = tos;
		goto *(++pc)->handler;;};}
		}
	);

      opc238_0_ENTRY:(
		{
		{
		Class * class = (Class *) cp->info[pc->operand.uui.u1];
		Object * obj = (Object *) ostack[-1];
		if ((obj != ((void *) 0))
		    && !isInstanceOf (class, obj->class))
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_ClassCastException,
		 ((ClassBlock *) (obj->class + 1))->name, ((void *) 0));
		goto throwException;}; goto *(++pc)->handler;;}
		}
	);

      opc239_0_ENTRY:(
		{
		{
		Class * class = (Class *) cp->info[pc->operand.uui.u1];
		Object * obj = (Object *) ostack[-1];
		if (obj != ((void *) 0)) ostack[-1] =
		isInstanceOf (class, obj->class); goto *(++pc)->handler;;}
		}
	);

      opc243_0_ENTRY:(
		{
		(
			{
			Class * class =
			(Class *) cp->info[pc->operand.uui.u1];
			int i, dim = pc->operand.uui.u2; Object * obj;
			ostack -= dim; frame->last_pc = pc; for (i = 0;
								 i < dim;
								 i++)
			if ((xintptr) ostack[i] < 0)
			{
			signalChainedExceptionEnum
			(exception_java_lang_NegativeArraySizeException,
			 ((void *) 0), ((void *) 0)); goto throwException;}
			if ((obj =
			     allocMultiArray (class, dim,
					      (xintptr *) ostack)) ==
			    ((void *) 0)) goto throwException;
			{
			xuintptr tos = (xuintptr) obj; *ostack++ = tos;
			goto *(++pc)->handler;;};}
		);}
	);

      opc245_0_ENTRY:(
		{
		{
		ee->last_frame = frame->prev;
		signalChainedExceptionEnum
		(exception_java_lang_AbstractMethodError, mb->name,
		 ((void *) 0)); goto throwException;}
		}
	);

      opc214_0_ENTRY:(
		{
		{
		Class * new_class;
		arg1 = ostack - pc->operand.uu.u1; if (!*arg1)
		{
		frame->last_pc = pc;
		signalChainedExceptionEnum
		(exception_java_lang_NullPointerException, ((void *) 0),
		 ((void *) 0)); goto throwException;};;
		new_class = (*(Object **) arg1)->class;
		new_mb =
		((ClassBlock *) (new_class +
				 1))->method_table[pc->operand.uu.u2];
		goto invokeMethod;}
		}
	);

      invokeMethod:
	{

		Frame *new_frame = (Frame *) (arg1 + new_mb->max_locals);
		Object *sync_ob = ((void *) 0);

		frame->last_pc = pc;
		ostack = (xuintptr *) (((xuintptr) (new_frame + 1) + 7) & ~7);

		if ((char *) (ostack + new_mb->max_stack) > ee->stack_end)
		  {
			  if (ee->overflow++)
			    {

				    xi_logger_write (((void *) 0),
						     XI_LOG_LEVEL_PRINT,
						     "interp/engine/interp.c",
						     __FUNCTION__, 1575,
						     "Fatal stack overflow!  Aborting VM.\n");
				    exitVM (1);
			    }
			  ee->stack_end += 1 * 1024;
			  {
				  frame->last_pc = pc;
				  signalChainedExceptionEnum
					  (exception_java_lang_StackOverflowError,
					   ((void *) 0), ((void *) 0));
				  goto throwException;
			  };
		  }

		new_frame->mb = new_mb;
		new_frame->lvars = arg1;
		new_frame->ostack = ostack;
		new_frame->prev = frame;

		ee->last_frame = new_frame;

		if (new_mb->access_flags & 0x0020)
		  {
			  sync_ob =
				  new_mb->
				  access_flags & 0x0008 ? (Object *) new_mb->
				  class : (Object *) * arg1;
			  objectLock (sync_ob);
		  }

		if (new_mb->access_flags & 0x0100)
		  {
			  ostack = (*new_mb->native_invoker) (new_mb->class,
							      new_mb, arg1);

			  if (sync_ob)
				  objectUnlock (sync_ob);

			  ee->last_frame = frame;

			  if (ee->exception)
				  goto throwException;
			  goto *(++pc)->handler;;
		  }
		else
		  {
			  if ((xuintptr) new_mb->code & 0x3)
				  prepare (new_mb, handlers);

			  frame = new_frame;
			  mb = new_mb;
			  lvars = new_frame->lvars;
			  this = (Object *) lvars[0];
			  pc = (CodePntr) mb->code;
			  cp = &(((ClassBlock *) (mb->class +
						  1))->constant_pool);
		  }
		goto *pc->handler;
	}

      methodReturn:

	frame = frame->prev;

	if (frame->mb == ((void *) 0))
	  {

		  return ostack;
	  }

	if (mb->access_flags & 0x0020)
	  {
		  Object *sync_ob =
			  mb->access_flags & 0x0008 ? (Object *) mb->
			  class : this;
		  objectUnlock (sync_ob);
	  }

	mb = frame->mb;
	ostack = lvars;
	lvars = frame->lvars;
	this = (Object *) lvars[0];
	pc = frame->last_pc;
	cp = &(((ClassBlock *) (mb->class + 1))->constant_pool);

	ee->last_frame = frame;

	pc++;
	goto *pc->handler;;

      throwException:
	{
		Object *excep = ee->exception;
		ee->exception = ((void *) 0);

		pc = findCatchBlock (excep->class);

		if (pc == ((void *) 0))
		  {
			  ee->exception = excep;
			  return ((void *) 0);
		  }

		if (ee->overflow)
		  {
			  ee->overflow = (1 != 1);
			  ee->stack_end -= 1 * 1024;
		  }

		frame = ee->last_frame;
		mb = frame->mb;
		ostack = frame->ostack;
		lvars = frame->lvars;
		this = (Object *) lvars[0];
		cp = &(((ClassBlock *) (mb->class + 1))->constant_pool);

		*ostack++ = (xuintptr) excep;

		goto *pc->handler;
	}
}

void
initialiseInterpreter (InitArgs * args)
{
	initialiseDirect (args);
}

void
shutdownInterpreter ()
{
}
